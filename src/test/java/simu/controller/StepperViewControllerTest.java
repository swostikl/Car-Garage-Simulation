package simu.controller;

import javafx.fxml.FXMLLoader;

import javafx.scene.control.Button;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import simu.framework.Process;
import simu.framework.ProcessManager;
import simu.model.DelayProcess;
import javafx.embed.swing.JFXPanel;
import test.PrivateFieldAccess;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class StepperViewControllerTest {

    private StepperViewController stepperViewController;

    // initJavaFX method generated by ChatGPT
    @BeforeAll
    static void initJavaFX() {
        new JFXPanel();
    }

    @BeforeEach
    void beforeEach() throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/stepper.fxml"));
        loader.load();
        stepperViewController = loader.getController();
    }

    @Test
    void delayProcessAddTest() throws IOException {
        // arrange: Create a mock ProcessManager
        ProcessManager pm = mock(ProcessManager.class);
        ArgumentCaptor<Process> delayProcessArgumentCaptor = ArgumentCaptor.forClass(Process.class);

        // act: Initialize StepperViewController with the mock pm and delay of 200
        stepperViewController.init(pm, 200);
        verify(pm).addProcess(delayProcessArgumentCaptor.capture());
        Process process = delayProcessArgumentCaptor.getValue();

        // assert: assert if the delay added has 200 ms delay
        if (!(process instanceof DelayProcess)) {
            fail("Captured Process not an instance of DelayProcess");
        }
        assertEquals(200, ((DelayProcess) process).getDelayMs());
    }

    @Test
    void delayAddTest() throws NoSuchFieldException, IllegalAccessException {
        // arrange: get private increaseSpeed button from stepperViewController and create a mock ProcessManager
        Button increaseSpeed = PrivateFieldAccess.getPrivateField(stepperViewController, "increaseSpeed");
        ProcessManager pm = mock(ProcessManager.class);
        ArgumentCaptor<Process> processArgumentCaptor = ArgumentCaptor.forClass(Process.class);

        /*
            act:
            1. initialize stepperViewController with mock pm
            2. Capture delayProcess argument from ProcessManager .addProcess() method
            3. fire the increaseSpeed Button
         */
        stepperViewController.init(pm, 200);
        verify(pm).addProcess(processArgumentCaptor.capture());
        Process delayProcess = processArgumentCaptor.getValue();
        increaseSpeed.fire();

        // assert: assert if the delayMs is correct
        if (!(delayProcess instanceof DelayProcess)) {
            fail("Captured Process not an instance of DelayProcess");
        }
        assertEquals(300, ((DelayProcess) delayProcess).getDelayMs());

        // act 1: increase speed further
        for (int i = 0; i < 50; i++) {
            increaseSpeed.fire();
        }

        // assert 1: assert if the delay equals 2000
        assertEquals(2000, ((DelayProcess) delayProcess).getDelayMs());
    }

    @Test
    void delaySubtractTest() throws NoSuchFieldException, IllegalAccessException {
        // arrange: create a mock ProcessManager and get private decreaseSpeed button from stepperViewController
        ProcessManager pm = mock(ProcessManager.class);
        ArgumentCaptor<Process> processArgumentCaptor = ArgumentCaptor.forClass(Process.class);
        Button decreaseSpeed = PrivateFieldAccess.getPrivateField(stepperViewController, "decreaseSpeed");

        /*
            act:
            1. initialize stepperViewController with mock pm
            2. Capture delayProcess argument from ProcessManager .addProcess() method
            3. fire the decreaseSpeed Button
         */
        stepperViewController.init(pm, 400);
        verify(pm).addProcess(processArgumentCaptor.capture());
        Process delayProcess = processArgumentCaptor.getValue();
        decreaseSpeed.fire();

        // assert: assert if the delayMs is correct
        if (!(delayProcess instanceof DelayProcess)) {
            fail("Captured Process not an instance of DelayProcess");
        }
        assertEquals(300, ((DelayProcess) delayProcess).getDelayMs());

        // act 1: decrease speed further
        for (int i = 0; i < 50; i++) {
            decreaseSpeed.fire();
        }

        // assert 1: assert if the delay equals 100
        assertEquals(100, ((DelayProcess) delayProcess).getDelayMs());
    }
}